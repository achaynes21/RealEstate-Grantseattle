@model InventoryERP.Web.Models.SignInViewModel

@{
    ViewBag.Title = "Sign In";
    Layout = "~/Views/Shared/_SubLayout.cshtml";
}

<div class="container">
    <section class="signin-form-section link-section">
        <div class="signin-form-content">
            <h1 class="page-title">Sign In</h1>

            <h4>Sign in with email</h4>

            @if (ViewContext.ViewData.ModelState.Keys.Contains("ERROR"))
            {
                <div class="validation-error">
                    @ViewContext.ViewData.ModelState["ERROR"].Errors.FirstOrDefault().ErrorMessage
                </div>
            }

            <div class="form signin-form">
                @using (Html.BeginRouteForm(MVC.RouteNames.Account.SignIn, FormMethod.Post))
                {
                    <div class="field">
                        @Html.TextBoxFor(x => x.Email, new { size = "25", placeholder = "Email", @class = "inputbox" })
                        @Html.ValidationMessageFor(x => x.Email)
                    </div>
                    <div class="field">
                        @Html.PasswordFor(x => x.Password, new { size = "25", placeholder = "Password", @class = "inputbox" })
                        @Html.ValidationMessageFor(x => x.Password)
                    </div>
                    <div class="field">
                        <label class="remember-me">
                            @Html.CheckBoxFor(x => x.RememberMe)
                            Remember me
                        </label>
                    </div>
                    <div class="field">
                        <button class="btn btn-primary float-left btn-m" type="submit">Sign In</button>
                        
                        <div class="clear"></div>
                    </div>
                    <div class="field">
                        <a href="@Url.Action("ForgotPassword", "Account")">Forgot Password?</a>
                    </div>
                }

            </div>

            @*<div class="login-or"><hr class="rule"><span class="h-or">or</span></div>
            <div class="alternate-login">
                <h4>
                    Sign in with:
                    <a class="btn btn-facebook" id="btn-facebook" href="javascript:loginWithFacebook();">
                        <span>Facebook</span>
                    </a>
                </h4>
            </div>*@
        </div>
    </section>
    <section class="signup-link-section link-section">
        <div class="signup-link-content">
            <h1 class="page-title">Sign Up</h1>
            <h4>Don't have a Grantseattle Account?<br /> You can register <a href="@Url.RouteUrl(MVC.RouteNames.Account.SignUp)">here</a>.</h4>
        </div>
    </section>
    <div class="clear"></div>
</div>

@*@section scripts
{
    <script src="http://connect.facebook.net/en_US/all.js"></script>
    <script>
        window.fbAsyncInit = function () {
            FB.init({
                appId: '806165186084124',
                status: true,   // check login status
                cookie: true,   // enable cookies to allow the server to access the session
                xfbml: true     // parse XFBML
            });

            /*
            // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
            // for any authentication related change, such as login, logout or session refresh. This means that
            // whenever someone who was previously logged out tries to log in again, the correct case below
            // will be handled.
            FB.Event.subscribe('auth.authResponseChange', function (response) {

                // Here we specify what we do with the response anytime this event occurs.
                if (response.status === 'connected') {

                    // The response object is returned with a status field that lets the app know the current
                    // login status of the person. In this case, we're handling the situation where they
                    // have logged in to the app.
                    login();
                } else if (response.status === 'not_authorized') {

                    // In this case, the person is logged into Facebook, but not into the app, so we call
                    // FB.login() to prompt them to do so.
                    // In real-life usage, you wouldn't want to immediately prompt someone to login
                    // like this, for two reasons:
                    // (1) JavaScript created popup windows are blocked by most browsers unless they
                    // result from direct interaction from people using the app (such as a mouse click)
                    // (2) it is a bad experience to be continually prompted to login upon page load.
                    FB.login();
                } else {

                    // In this case, the person is not logged into Facebook, so we call the login()
                    // function to prompt them to do so. Note that at this stage there is no indication
                    // of whether they are logged into the app. If they aren't then they'll see the Login
                    // dialog right after they log in to Facebook.
                    // The same caveats as above apply to the FB.login() call here.
                    FB.login();
                }
            });
            */
        };

        // Load the SDK asynchronously
        //(function (d) {
        //    var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
        //    if (d.getElementById(id)) { return; }
        //    js = d.createElement('script');
        //    js.id = id;
        //    js.async = true;
        //    js.src = "//connect.facebook.net/en_US/all.js";
        //    ref.parentNode.insertBefore(js, ref);
        //}(document));

        function afterFacebookConnect() {

            FB.getLoginStatus(function (response) {

                if (response.session) {

                    login(response.session.access_token);
                } else {

                    // user clicked Cancel
                }
            });
        };

        function loginWithFacebook() {

            FB.login(function (response) {

                if (response.authResponse) {

                    getFBData(response.authResponse.accessToken);
                } else {

                    // The person cancelled the login dialog
                }
            }, { scope: "email" });
        }

        // Here we run a very simple test of the Graph API after login is successful.
        // This getFBData() function is only called in those cases.
        function getFBData(accessToken) {

            FB.api('/me', function (response) {

                var email = response.email;
                var fistName = response.first_name;
                var lastName = response.last_name;

                var valid = true;
                var msg = "";

                if (!email) {

                    valid = false;
                    msg = "Please provide a valid email.";
                }

                if (!fistName) {

                    valid = false;
                    msg = "Please provide your first name.";
                }

                if (!lastName) {

                    valid = false;
                    msg = "Please provide last name.";
                }

                if (valid) {

                    jQuery.ajax({

                        url: '@Url.RouteUrl(MVC.RouteNames.Account.LogInWithFacebook)',
                        method: 'post',
                        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                        dataType: 'json',
                        data: { email: email, firstName: fistName, lastName: lastName, token: accessToken },
                        success: function (data) {

                            if (data) {

                                window.location = '@Url.RouteUrl(MVC.RouteNames.Home.Index)';
                            }
                            else {

                                window.location = '@Url.RouteUrl(MVC.RouteNames.Account.SignUp)';
                            }
                        },
                        error: function () {

                            SilentAction.Popup.show({
                                title: 'Error',
                                message: 'An error occurred while processing your request.',
                                timeout: 10
                            });
                        }
                    });


                }
                else {

                    JobVizz.Popup.show({
                        titlebar: false,
                        message: msg,
                        timeout: 10 // 10 seconds
                    });
                }

            });
        }

    </script>
}*@