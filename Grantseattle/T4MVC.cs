// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
#pragma warning disable 1591, 3008, 3009
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    public static InventoryERP.Web.Controllers.AccountController Account = new InventoryERP.Web.Controllers.T4MVC_AccountController();
    public static InventoryERP.Web.Controllers.ErrorsController Errors = new InventoryERP.Web.Controllers.T4MVC_ErrorsController();
    public static InventoryERP.Controllers.HomeController Home = new InventoryERP.Controllers.T4MVC_HomeController();
    public static InventoryERP.Web.Controllers.ItemController Item = new InventoryERP.Web.Controllers.T4MVC_ItemController();
    //public static InventoryERP.Web.Controllers. Item = new InventoryERP.Web.Controllers.T4MVC_ItemController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string _references_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_references.min.js") ? Url("_references.min.js") : Url("_references.js");
        public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
        public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class file_uploader {
            private const string URLPATH = "~/Scripts/file-uploader";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string canvas_to_blob_min_js = Url("canvas-to-blob.min.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class css {
                private const string URLPATH = "~/Scripts/file-uploader/css";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_fileupload_ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fileupload-ui.min.css") ? Url("jquery.fileupload-ui.min.css") : Url("jquery.fileupload-ui.css");
                     
                public static readonly string jquery_fileupload_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fileupload.min.css") ? Url("jquery.fileupload.min.css") : Url("jquery.fileupload.css");
                     
            }
        
            public static readonly string jquery_blueimp_gallery_min_js = Url("jquery.blueimp-gallery.min.js");
            public static readonly string jquery_fileupload_audio_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fileupload-audio.min.js") ? Url("jquery.fileupload-audio.min.js") : Url("jquery.fileupload-audio.js");
            public static readonly string jquery_fileupload_image_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fileupload-image.min.js") ? Url("jquery.fileupload-image.min.js") : Url("jquery.fileupload-image.js");
            public static readonly string jquery_fileupload_process_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fileupload-process.min.js") ? Url("jquery.fileupload-process.min.js") : Url("jquery.fileupload-process.js");
            public static readonly string jquery_fileupload_ui_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fileupload-ui.min.js") ? Url("jquery.fileupload-ui.min.js") : Url("jquery.fileupload-ui.js");
            public static readonly string jquery_fileupload_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fileupload-validate.min.js") ? Url("jquery.fileupload-validate.min.js") : Url("jquery.fileupload-validate.js");
            public static readonly string jquery_fileupload_video_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fileupload-video.min.js") ? Url("jquery.fileupload-video.min.js") : Url("jquery.fileupload-video.js");
            public static readonly string jquery_fileupload_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fileupload.min.js") ? Url("jquery.fileupload.min.js") : Url("jquery.fileupload.js");
            public static readonly string jquery_iframe_transport_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.iframe-transport.min.js") ? Url("jquery.iframe-transport.min.js") : Url("jquery.iframe-transport.js");
            public static readonly string jquery_xdr_transport_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.xdr-transport.min.js") ? Url("jquery.xdr-transport.min.js") : Url("jquery.xdr-transport.js");
            public static readonly string load_image_min_js = Url("load-image.min.js");
            public static readonly string tmpl_min_js = Url("tmpl.min.js");
        }
    
        public static readonly string heartcode_canvasloader_min_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/heartcode-canvasloader-min.min.js") ? Url("heartcode-canvasloader-min.min.js") : Url("heartcode-canvasloader-min.js");
        public static readonly string html5shiv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/html5shiv.min.js") ? Url("html5shiv.min.js") : Url("html5shiv.js");
        public static readonly string imagesloaded_min_js = Url("imagesloaded.min.js");
        public static readonly string jquery_1_10_2_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.10.2.intellisense.min.js") ? Url("jquery-1.10.2.intellisense.min.js") : Url("jquery-1.10.2.intellisense.js");
        public static readonly string jquery_1_10_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.10.2.min.js") ? Url("jquery-1.10.2.min.js") : Url("jquery-1.10.2.js");
        public static readonly string jquery_1_10_2_min_js = Url("jquery-1.10.2.min.js");
        public static readonly string jquery_1_10_2_min_map = Url("jquery-1.10.2.min.map");
        public static readonly string jquery_1_11_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.11.min.js") ? Url("jquery-1.11.min.js") : Url("jquery-1.11.js");
        public static readonly string jquery_2_1_1_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.1.intellisense.min.js") ? Url("jquery-2.1.1.intellisense.min.js") : Url("jquery-2.1.1.intellisense.js");
        public static readonly string jquery_2_1_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.1.min.js") ? Url("jquery-2.1.1.min.js") : Url("jquery-2.1.1.js");
        public static readonly string jquery_2_1_1_min_js = Url("jquery-2.1.1.min.js");
        public static readonly string jquery_2_1_1_min_map = Url("jquery-2.1.1.min.map");
        public static readonly string jquery_ui_1_10_4_custom_min_js = Url("jquery-ui-1.10.4.custom.min.js");
        public static readonly string jquery_ui_1_10_4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-1.10.4.min.js") ? Url("jquery-ui-1.10.4.min.js") : Url("jquery-ui-1.10.4.js");
        public static readonly string jquery_ui_1_10_4_min_js = Url("jquery-ui-1.10.4.min.js");
        public static readonly string jquery_easing_min_js = Url("jquery.easing.min.js");
        public static readonly string jquery_masonry_2_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.masonry-2.1.min.js") ? Url("jquery.masonry-2.1.min.js") : Url("jquery.masonry-2.1.js");
        public static readonly string jquery_masonry_3_1_5_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.masonry-3.1.5.min.js") ? Url("jquery.masonry-3.1.5.min.js") : Url("jquery.masonry-3.1.5.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        public static readonly string locationLookup_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/locationLookup.min.js") ? Url("locationLookup.min.js") : Url("locationLookup.js");
        public static readonly string modernizr_2_6_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.6.2.min.js") ? Url("modernizr-2.6.2.min.js") : Url("modernizr-2.6.2.js");
        public static readonly string modernizr_custom_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr.custom.min.js") ? Url("modernizr.custom.min.js") : Url("modernizr.custom.js");
        public static readonly string numericfield_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/numericfield.min.js") ? Url("numericfield.min.js") : Url("numericfield.js");
        public static readonly string passwordStrength_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/passwordStrength.min.js") ? Url("passwordStrength.min.js") : Url("passwordStrength.js");
        public static readonly string respond_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/respond.min.js") ? Url("respond.min.js") : Url("respond.js");
        public static readonly string respond_min_js = Url("respond.min.js");
        public static readonly string scripts_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scripts.min.js") ? Url("scripts.min.js") : Url("scripts.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class selectize {
            private const string URLPATH = "~/Scripts/selectize";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class css {
                private const string URLPATH = "~/Scripts/selectize/css";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string selectize_bootstrap2_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/selectize.bootstrap2.min.css") ? Url("selectize.bootstrap2.min.css") : Url("selectize.bootstrap2.css");
                     
                public static readonly string selectize_bootstrap3_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/selectize.bootstrap3.min.css") ? Url("selectize.bootstrap3.min.css") : Url("selectize.bootstrap3.css");
                     
                public static readonly string selectize_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/selectize.min.css") ? Url("selectize.min.css") : Url("selectize.css");
                     
                public static readonly string selectize_default_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/selectize.default.min.css") ? Url("selectize.default.min.css") : Url("selectize.default.css");
                     
                public static readonly string selectize_legacy_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/selectize.legacy.min.css") ? Url("selectize.legacy.min.css") : Url("selectize.legacy.css");
                     
            }
        
            public static readonly string selectize_min_js = Url("selectize.min.js");
        }
    
        public static readonly string services_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/services.min.js") ? Url("services.min.js") : Url("services.js");
        public static readonly string simplr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/simplr.min.js") ? Url("simplr.min.js") : Url("simplr.js");
        public static readonly string spin_min_js = Url("spin.min.js");
        public static readonly string testimonials_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/testimonials.min.js") ? Url("testimonials.min.js") : Url("testimonials.js");
        public static readonly string toucheffects_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/toucheffects.min.js") ? Url("toucheffects.min.js") : Url("toucheffects.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class validation {
            private const string URLPATH = "~/Scripts/validation";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string additional_methods_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/additional-methods.min.js") ? Url("additional-methods.min.js") : Url("additional-methods.js");
            public static readonly string additional_methods_min_js = Url("additional-methods.min.js");
            public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
            public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class zebra_datepicker {
            private const string URLPATH = "~/Scripts/zebra_datepicker";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class css {
                private const string URLPATH = "~/Scripts/zebra_datepicker/css";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
                     
                public static readonly string calendar_disabled_png = Url("calendar-disabled.png");
                public static readonly string calendar_png = Url("calendar.png");
                public static readonly string default_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/default.min.css") ? Url("default.min.css") : Url("default.css");
                     
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class metallic {
                    private const string URLPATH = "~/Scripts/zebra_datepicker/css/metallic";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string default_date_png = Url("default-date.png");
                    public static readonly string disabled_date_png = Url("disabled-date.png");
                    public static readonly string header_png = Url("header.png");
                    public static readonly string selected_date_png = Url("selected-date.png");
                }
            
                public static readonly string metallic_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/metallic.min.css") ? Url("metallic.min.css") : Url("metallic.css");
                     
                public static readonly string themes_png = Url("themes.png");
            }
        
            public static readonly string zebra_datepicker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zebra_datepicker.min.js") ? Url("zebra_datepicker.min.js") : Url("zebra_datepicker.js");
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string animate_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/animate.min.css") ? Url("animate.min.css") : Url("animate.css");
             
        public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
             
        public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class css {
            private const string URLPATH = "~/Content/css";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string animate_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/animate.min.css") ? Url("animate.min.css") : Url("animate.css");
                 
            public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
                 
            public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
            public static readonly string default_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/default.min.css") ? Url("default.min.css") : Url("default.css");
                 
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class font_awesome {
                private const string URLPATH = "~/Content/css/font-awesome";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class css {
                    private const string URLPATH = "~/Content/css/font-awesome/css";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string font_awesome_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/font-awesome.min.css") ? Url("font-awesome.min.css") : Url("font-awesome.css");
                         
                    public static readonly string font_awesome_min_css = Url("font-awesome.min.css");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fonts {
                    private const string URLPATH = "~/Content/css/font-awesome/fonts";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string fontawesome_webfont_eot = Url("fontawesome-webfont.eot");
                    public static readonly string fontawesome_webfont_svg = Url("fontawesome-webfont.svg");
                    public static readonly string fontawesome_webfont_ttf = Url("fontawesome-webfont.ttf");
                    public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
                    public static readonly string FontAwesome_otf = Url("FontAwesome.otf");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class less {
                    private const string URLPATH = "~/Content/css/font-awesome/less";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string bordered_pulled_less = Url("bordered-pulled.less");
                    public static readonly string core_less = Url("core.less");
                    public static readonly string fixed_width_less = Url("fixed-width.less");
                    public static readonly string font_awesome_less = Url("font-awesome.less");
                    public static readonly string icons_less = Url("icons.less");
                    public static readonly string larger_less = Url("larger.less");
                    public static readonly string list_less = Url("list.less");
                    public static readonly string mixins_less = Url("mixins.less");
                    public static readonly string path_less = Url("path.less");
                    public static readonly string rotated_flipped_less = Url("rotated-flipped.less");
                    public static readonly string spinning_less = Url("spinning.less");
                    public static readonly string stacked_less = Url("stacked.less");
                    public static readonly string variables_less = Url("variables.less");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class scss {
                    private const string URLPATH = "~/Content/css/font-awesome/scss";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string _bordered_pulled_scss = Url("_bordered-pulled.scss");
                    public static readonly string _core_scss = Url("_core.scss");
                    public static readonly string _fixed_width_scss = Url("_fixed-width.scss");
                    public static readonly string _icons_scss = Url("_icons.scss");
                    public static readonly string _larger_scss = Url("_larger.scss");
                    public static readonly string _list_scss = Url("_list.scss");
                    public static readonly string _mixins_scss = Url("_mixins.scss");
                    public static readonly string _path_scss = Url("_path.scss");
                    public static readonly string _rotated_flipped_scss = Url("_rotated-flipped.scss");
                    public static readonly string _spinning_scss = Url("_spinning.scss");
                    public static readonly string _stacked_scss = Url("_stacked.scss");
                    public static readonly string _variables_scss = Url("_variables.scss");
                    public static readonly string font_awesome_scss = Url("font-awesome.scss");
                }
            
            }
        
            public static readonly string responsive_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/responsive.min.css") ? Url("responsive.min.css") : Url("responsive.css");
                 
            public static readonly string simplr_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/simplr.min.css") ? Url("simplr.min.css") : Url("simplr.css");
                 
            public static readonly string styles_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/styles-ie8.min.css") ? Url("styles-ie8.min.css") : Url("styles-ie8.css");
                 
            public static readonly string styles_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/styles.min.css") ? Url("styles.min.css") : Url("styles.css");
                 
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class typicons {
                private const string URLPATH = "~/Content/css/typicons";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string typicons_eot = Url("typicons.eot");
                public static readonly string typicons_min_css = Url("typicons.min.css");
                public static readonly string typicons_svg = Url("typicons.svg");
                public static readonly string typicons_ttf = Url("typicons.ttf");
                public static readonly string typicons_woff = Url("typicons.woff");
            }
        
        }
    
        public static readonly string default_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/default.min.css") ? Url("default.min.css") : Url("default.css");
             
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class font_awesome {
            private const string URLPATH = "~/Content/font-awesome";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class css {
                private const string URLPATH = "~/Content/font-awesome/css";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string font_awesome_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/font-awesome.min.css") ? Url("font-awesome.min.css") : Url("font-awesome.css");
                     
                public static readonly string font_awesome_min_css = Url("font-awesome.min.css");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class fonts {
                private const string URLPATH = "~/Content/font-awesome/fonts";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string fontawesome_webfont_eot = Url("fontawesome-webfont.eot");
                public static readonly string fontawesome_webfont_svg = Url("fontawesome-webfont.svg");
                public static readonly string fontawesome_webfont_ttf = Url("fontawesome-webfont.ttf");
                public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
                public static readonly string FontAwesome_otf = Url("FontAwesome.otf");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class less {
                private const string URLPATH = "~/Content/font-awesome/less";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bordered_pulled_less = Url("bordered-pulled.less");
                public static readonly string core_less = Url("core.less");
                public static readonly string fixed_width_less = Url("fixed-width.less");
                public static readonly string font_awesome_less = Url("font-awesome.less");
                public static readonly string icons_less = Url("icons.less");
                public static readonly string larger_less = Url("larger.less");
                public static readonly string list_less = Url("list.less");
                public static readonly string mixins_less = Url("mixins.less");
                public static readonly string path_less = Url("path.less");
                public static readonly string rotated_flipped_less = Url("rotated-flipped.less");
                public static readonly string spinning_less = Url("spinning.less");
                public static readonly string stacked_less = Url("stacked.less");
                public static readonly string variables_less = Url("variables.less");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class scss {
                private const string URLPATH = "~/Content/font-awesome/scss";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _bordered_pulled_scss = Url("_bordered-pulled.scss");
                public static readonly string _core_scss = Url("_core.scss");
                public static readonly string _fixed_width_scss = Url("_fixed-width.scss");
                public static readonly string _icons_scss = Url("_icons.scss");
                public static readonly string _larger_scss = Url("_larger.scss");
                public static readonly string _list_scss = Url("_list.scss");
                public static readonly string _mixins_scss = Url("_mixins.scss");
                public static readonly string _path_scss = Url("_path.scss");
                public static readonly string _rotated_flipped_scss = Url("_rotated-flipped.scss");
                public static readonly string _spinning_scss = Url("_spinning.scss");
                public static readonly string _stacked_scss = Url("_stacked.scss");
                public static readonly string _variables_scss = Url("_variables.scss");
                public static readonly string font_awesome_scss = Url("font-awesome.scss");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fonts {
            private const string URLPATH = "~/Content/fonts";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string glyphicons_halflings_regular_eot = Url("glyphicons-halflings-regular.eot");
            public static readonly string glyphicons_halflings_regular_svg = Url("glyphicons-halflings-regular.svg");
            public static readonly string glyphicons_halflings_regular_ttf = Url("glyphicons-halflings-regular.ttf");
            public static readonly string glyphicons_halflings_regular_woff = Url("glyphicons-halflings-regular.woff");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class img {
            private const string URLPATH = "~/Content/img";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string btn_circle_hover_bg_png = Url("btn-circle_hover-bg.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class campaigns {
                private const string URLPATH = "~/Content/img/campaigns";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _1_lg_jpg = Url("1-lg.jpg");
                public static readonly string _1_jpg = Url("1.jpg");
                public static readonly string _10_jpg = Url("10.jpg");
                public static readonly string _11_jpg = Url("11.jpg");
                public static readonly string _12_jpg = Url("12.jpg");
                public static readonly string _13_jpg = Url("13.jpg");
                public static readonly string _14_jpg = Url("14.jpg");
                public static readonly string _15_jpg = Url("15.jpg");
                public static readonly string _16_jpg = Url("16.jpg");
                public static readonly string _2_jpg = Url("2.jpg");
                public static readonly string _3_jpg = Url("3.jpg");
                public static readonly string _4_jpg = Url("4.jpg");
                public static readonly string _5_jpg = Url("5.jpg");
                public static readonly string _6_jpg = Url("6.jpg");
                public static readonly string _7_jpg = Url("7.jpg");
                public static readonly string _8_jpg = Url("8.jpg");
                public static readonly string _9_jpg = Url("9.jpg");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class charities {
                private const string URLPATH = "~/Content/img/charities";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string redcross_png = Url("redcross.png");
                public static readonly string unicef_png = Url("unicef.png");
                public static readonly string usaid_png = Url("usaid.png");
                public static readonly string who_png = Url("who.png");
            }
        
            public static readonly string client_pic1_png = Url("client-pic1.png");
            public static readonly string client_pic2_jpg = Url("client-pic2.jpg");
            public static readonly string client_pic3_jpg = Url("client-pic3.jpg");
            public static readonly string client_pic4_png = Url("client-pic4.png");
            public static readonly string client_pic5_jpg = Url("client-pic5.jpg");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class company_logos {
                private const string URLPATH = "~/Content/img/company-logos";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bloomberg_bw_png = Url("bloomberg-bw.png");
                public static readonly string cnn_png = Url("cnn.png");
                public static readonly string fast_company_png = Url("fast-company.png");
                public static readonly string forbes_png = Url("forbes.png");
                public static readonly string mashable_png = Url("mashable.png");
                public static readonly string npr_png = Url("npr.png");
                public static readonly string ny_times_png = Url("ny-times.png");
                public static readonly string time_png = Url("time.png");
                public static readonly string usa_today_png = Url("usa-today.png");
            }
        
            public static readonly string downloads_bg_jpg = Url("downloads-bg.jpg");
            public static readonly string grains_png = Url("grains.png");
            public static readonly string intro_bg1_jpg = Url("intro-bg1.jpg");
            public static readonly string intro_bg2_jpg = Url("intro-bg2.jpg");
            public static readonly string intro_bg3_jpg = Url("intro-bg3.jpg");
            public static readonly string logo_png = Url("logo.png");
            public static readonly string member_profile_picture_placeholder_png = Url("member-profile-picture-placeholder.png");
            public static readonly string no_image_available_jpg = Url("no-image-available.jpg");
            public static readonly string noimage_png = Url("noimage.png");
        }
    
        public static readonly string responsive_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/responsive.min.css") ? Url("responsive.min.css") : Url("responsive.css");
             
        public static readonly string simplr_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/simplr.min.css") ? Url("simplr.min.css") : Url("simplr.css");
             
        public static readonly string styles_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/styles-ie8.min.css") ? Url("styles-ie8.min.css") : Url("styles-ie8.css");
             
        public static readonly string styles_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/styles.min.css") ? Url("styles.min.css") : Url("styles.css");
             
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class typicons {
            private const string URLPATH = "~/Content/typicons";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string typicons_eot = Url("typicons.eot");
            public static readonly string typicons_min_css = Url("typicons.min.css");
            public static readonly string typicons_svg = Url("typicons.svg");
            public static readonly string typicons_ttf = Url("typicons.ttf");
            public static readonly string typicons_woff = Url("typicons.woff");
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591, 3008, 3009


